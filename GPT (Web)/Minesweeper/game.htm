<!DOCTYPE html>
<html lang="en" dir="ltr">
	<head>
		<title>Minesweeper - By Morgan Evans</title>
		<meta charset="UTF-8" />
		<script>
			var gc = gcc = null;
			var bee_image = new Image();
			bee_image.src = "bee.png";
			var board = null;
			var game_over = false;

			function Board(size = 10, bees = 10) {

				this.FindFreeCell = function() {
					var free_cell = -1;
					do {
						free_cell = Math.floor(Math.random() * (this.size * this.size));
					} while (this.cells[free_cell].has_bee);
					return free_cell;
				}

				this.size = size < 5 ? 5 : size;
				this.bees = bees < 1 ? 1 : bees;
				this.bees_found = 0;
				this.cells = [];
				var cell_width = gc.width / this.size;
				var cell_height = gc.height / this.size;
				for (var y = 0; y < size; y++) {
					for (var x = 0; x < size; x++) {
						this.cells.push(new Cell(cell_width * x, cell_height * y, cell_width, cell_height, this));
					}
				}
				var cell_count = size * size;
				for (var bee = 0; bee < this.bees; bee++) {
					var free_cell = this.FindFreeCell();
					this.cells[free_cell].has_bee = true;
				}

				this.RevealNeighbours = function(cell) {
					if (this.cells != null && cell.GetNeighBees() == 0) {
						var cell_index = this.cells.indexOf(cell);
						var row_index = Math.floor(cell_index / this.size);
						var column_index = cell_index % this.size;
						if (row_index > 0) {
							if (column_index > 0) {
								this.cells[cell_index - 1 - this.size].Reveal(); // Above Left
								this.cells[cell_index - this.size].Reveal();	// Above
								if (column_index < size - 1) this.cells[cell_index + 1 - this.size].Reveal() // Above Right
							}
						}
						if (column_index > 0) this.cells[cell_index - 1].Reveal(); // Left
						if (column_index < this.size - 1) this.cells[cell_index + 1].Reveal(); // Right
						if (row_index < this.size - 1) {
							if (column_index > 0) {
								this.cells[cell_index - 1 + this.size].Reveal(); // Below Left
								this.cells[cell_index + this.size].Reveal();	// Below
								if (column_index < size - 1) this.cells[cell_index + 1 + this.size].Reveal() // Below Right
							}
						}
					}
				}

				this.GetNeighBees = function(cell) {
					var bee_count = 0;
					if (this.cells != null) {
						var cell_index = this.cells.indexOf(cell);
						var row_index = Math.floor(cell_index / this.size);
						var column_index = cell_index % this.size;
						if (row_index > 0) {
							if (column_index > 0) {
								if (this.cells[cell_index - 1 - this.size].HasBee()) bee_count++; // Above Left
								if (this.cells[cell_index - this.size].HasBee()) bee_count++;	// Above
								if (column_index < size - 1 && this.cells[cell_index + 1 - this.size].HasBee()) bee_count++; // Above Right
							}
						}
						if (column_index > 0 && this.cells[cell_index - 1].HasBee()) bee_count++; // Left
						if (column_index < this.size - 1 && this.cells[cell_index + 1].HasBee()) bee_count++; // Right
						if (row_index < this.size - 1) {
							if (column_index > 0) {
								if (this.cells[cell_index - 1 + this.size].HasBee()) bee_count++; // Below Left
								if (this.cells[cell_index + this.size].HasBee()) bee_count++;	// Below
								if (column_index < size - 1 && this.cells[cell_index + 1 + this.size].HasBee()) bee_count++ // Below Right
							}
						}
					}
					return bee_count;
				}

				this.CheckIfWon = function() {
					var revealed = 0;
					var total_cells = this.cells.length;
					for (var i = 0; i < total_cells; i++) {
						if (this.cells[i].revealed) revealed++;
					}
					if (revealed == total_cells - this.bees) {
						DrawGame();
						EndGame(false);
					}
				}

				this.RevealAllBees = function() {
					var total_cells = this.cells.length;
					for (var i = 0; i < total_cells; i++) {
						if (this.cells[i].has_bee) this.cells[i].revealed = true;
					}
					DrawGame();
				}
			}

			function Cell(x, y, width, height, board) {
				this.has_bee = false;
				this.revealed = false;
				this.x = x;
				this.y = y;
				this.width = width;
				this.height = height;
				this.board = board;

				this.HasBee = function() {
					return this.has_bee;
				}

				this.Reveal = function(show_bee = false) {
					if (!this.revealed) {
						this.revealed = true;
						if (show_bee) {
							if (this.has_bee) {
								DrawGame();
								EndGame(true);
							}
						}
						if (this.GetNeighBees() == 0) this.board.RevealNeighbours(this);
						if (!game_over) this.board.CheckIfWon();
					}
				}

				this.GetNeighBees = function() {
					return this.board.GetNeighBees(this);
				}
			}

			function InitGame(grid_size = 10, bee_count = 10) {
				gc = document.getElementById("gc");
				gcc = gc.getContext("2d");
				board = new Board(grid_size, bee_count);
			}

			function DrawGame() {
				gcc.strokeStyle = "black";
				for (var i = 0; i < board.cells.length; i++) {
					gcc.fillStyle = board.cells[i].revealed ? "white" : "lightgrey";
					gcc.fillRect(board.cells[i].x, board.cells[i].y, board.cells[i].width, board.cells[i].height);
					gcc.strokeRect(board.cells[i].x, board.cells[i].y, board.cells[i].width, board.cells[i].height);
					if (board.cells[i].revealed) {
						var cell_neighbees = board.cells[i].GetNeighBees();
						var font_colour = "";
						if (!board.cells[i].has_bee) {
							if (cell_neighbees > 0) {
								switch (cell_neighbees) {
									case 3:
									case 4: font_colour = "green"; break;
									case 5:
									case 6: font_colour = "yellow"; break;
									case 7:
									case 8: font_colour = "red"; break;
									default: font_colour = "black";
								}
								gcc.fillStyle = font_colour;
								gcc.font = board.cells[i].height + "px sans-serif";
								gcc.fillText("" + cell_neighbees, board.cells[i].x + 2, board.cells[i].y + board.cells[i].height - 2);
							}
						} else {
							gcc.drawImage(bee_image, board.cells[i].x + 1, board.cells[i].y + 1, board.cells[i].width - 2, board.cells[i].height - 2);
						}
					}
				}
			}

			function EndGame(stung = false) {
				board.RevealAllBees();
				window.alert(stung ? "You got stung!" : "You won!");
				game_over = true;
			}

			function MouseClick(evt) {
				if (evt.target == gc && !game_over) {
					var mouse_x = evt.offsetX;
					var mouse_y = evt.offsetY;
					for (var i = 0; i < board.cells.length; i++) {
						if (mouse_x >= board.cells[i].x && mouse_x <= board.cells[i].x + board.cells[i].width &&
								mouse_y >= board.cells[i].y && mouse_y <= board.cells[i].y + board.cells[i].height) {
							board.cells[i].Reveal(true);
						}
					}
				}
			}

			window.setInterval(DrawGame,1000/25);
			document.addEventListener("click", MouseClick);
		</script>
		<style type="text/css">
			canvas#gc	{
				position: absolute;
				top: 50%;
				left: 50%;
				transform: translate(-50%,-50%);
				border: 4px solid black;
				border-radius: 4px;
			}
		</style>
	</head>
	<body onload="InitGame()">
		<canvas id="gc" width="480" height="480"></canvas>
	</body>
</html>